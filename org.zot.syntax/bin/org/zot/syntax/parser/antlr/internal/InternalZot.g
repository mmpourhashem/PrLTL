/*
 * generated by Xtext 2.10.0
 */
grammar InternalZot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.zot.syntax.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.zot.syntax.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.zot.syntax.services.ZotGrammarAccess;

}

@parser::members {

 	private ZotGrammarAccess grammarAccess;

    public InternalZotParser(TokenStream input, ZotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ZotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFmaFormulaParserRuleCall_0());
			}
			lv_fma_0_0=ruleFormula
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"fma",
					lv_fma_0_0,
					"org.zot.syntax.Zot.Formula");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getProbFProbFParserRuleCall_1_0_0());
					}
					lv_probF_1_0=ruleProbF
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						set(
							$current,
							"probF",
							lv_probF_1_0,
							"org.zot.syntax.Zot.ProbF");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getTempTempFParserRuleCall_1_1_0());
					}
					lv_temp_2_0=ruleTempF
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						set(
							$current,
							"temp",
							lv_temp_2_0,
							"org.zot.syntax.Zot.TempF");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFormulaAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleProbF
entryRuleProbF returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProbFRule()); }
	iv_ruleProbF=ruleProbF
	{ $current=$iv_ruleProbF.current; }
	EOF;

// Rule ProbF
ruleProbF returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_probOp_0_0=RULE_PROPOP
				{
					newLeafNode(lv_probOp_0_0, grammarAccess.getProbFAccess().getProbOpPROPOPTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProbFRule());
					}
					setWithLastConsumed(
						$current,
						"probOp",
						lv_probOp_0_0,
						"org.zot.syntax.Zot.PROPOP");
				}
			)
		)
		(
			(
				(
					otherlv_1='(zot-p'
					{
						newLeafNode(otherlv_1, grammarAccess.getProbFAccess().getZotPKeyword_1_0_0_0());
					}
					otherlv_2='('
					{
						newLeafNode(otherlv_2, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_1_0_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF1TempFParserRuleCall_1_0_0_2_0());
							}
							lv_tempF1_3_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF1",
									lv_tempF1_3_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_4=')'
					{
						newLeafNode(otherlv_4, grammarAccess.getProbFAccess().getRightParenthesisKeyword_1_0_0_3());
					}
					otherlv_5=')'
					{
						newLeafNode(otherlv_5, grammarAccess.getProbFAccess().getRightParenthesisKeyword_1_0_0_4());
					}
				)
				    |
				(
					otherlv_6='(zot-cp'
					{
						newLeafNode(otherlv_6, grammarAccess.getProbFAccess().getZotCpKeyword_1_0_1_0());
					}
					otherlv_7='('
					{
						newLeafNode(otherlv_7, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_1_0_1_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF11TempFParserRuleCall_1_0_1_2_0());
							}
							lv_tempF11_8_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF11",
									lv_tempF11_8_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_9=')'
					{
						newLeafNode(otherlv_9, grammarAccess.getProbFAccess().getRightParenthesisKeyword_1_0_1_3());
					}
					otherlv_10='('
					{
						newLeafNode(otherlv_10, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_1_0_1_4());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF12TempFParserRuleCall_1_0_1_5_0());
							}
							lv_tempF12_11_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF12",
									lv_tempF12_11_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_12=')'
					{
						newLeafNode(otherlv_12, grammarAccess.getProbFAccess().getRightParenthesisKeyword_1_0_1_6());
					}
					otherlv_13=')'
					{
						newLeafNode(otherlv_13, grammarAccess.getProbFAccess().getRightParenthesisKeyword_1_0_1_7());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProbFAccess().getReal1DataTypeParserRuleCall_1_1_0());
					}
					lv_real1_14_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProbFRule());
						}
						set(
							$current,
							"real1",
							lv_real1_14_0,
							"org.zot.syntax.Zot.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(
					otherlv_15='(zot-p'
					{
						newLeafNode(otherlv_15, grammarAccess.getProbFAccess().getZotPKeyword_2_0_0_0());
					}
					otherlv_16='('
					{
						newLeafNode(otherlv_16, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_2_0_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF2TempFParserRuleCall_2_0_0_2_0());
							}
							lv_tempF2_17_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF2",
									lv_tempF2_17_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_18=')'
					{
						newLeafNode(otherlv_18, grammarAccess.getProbFAccess().getRightParenthesisKeyword_2_0_0_3());
					}
					otherlv_19=')'
					{
						newLeafNode(otherlv_19, grammarAccess.getProbFAccess().getRightParenthesisKeyword_2_0_0_4());
					}
				)
				    |
				(
					otherlv_20='(zot-cp'
					{
						newLeafNode(otherlv_20, grammarAccess.getProbFAccess().getZotCpKeyword_2_0_1_0());
					}
					otherlv_21='('
					{
						newLeafNode(otherlv_21, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_2_0_1_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF21TempFParserRuleCall_2_0_1_2_0());
							}
							lv_tempF21_22_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF21",
									lv_tempF21_22_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_23=')'
					{
						newLeafNode(otherlv_23, grammarAccess.getProbFAccess().getRightParenthesisKeyword_2_0_1_3());
					}
					otherlv_24='('
					{
						newLeafNode(otherlv_24, grammarAccess.getProbFAccess().getLeftParenthesisKeyword_2_0_1_4());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProbFAccess().getTempF22TempFParserRuleCall_2_0_1_5_0());
							}
							lv_tempF22_25_0=ruleTempF
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProbFRule());
								}
								set(
									$current,
									"tempF22",
									lv_tempF22_25_0,
									"org.zot.syntax.Zot.TempF");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_26=')'
					{
						newLeafNode(otherlv_26, grammarAccess.getProbFAccess().getRightParenthesisKeyword_2_0_1_6());
					}
					otherlv_27=')'
					{
						newLeafNode(otherlv_27, grammarAccess.getProbFAccess().getRightParenthesisKeyword_2_0_1_7());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProbFAccess().getReal2DataTypeParserRuleCall_2_1_0());
					}
					lv_real2_28_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProbFRule());
						}
						set(
							$current,
							"real2",
							lv_real2_28_0,
							"org.zot.syntax.Zot.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTempF
entryRuleTempF returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTempFRule()); }
	iv_ruleTempF=ruleTempF
	{ $current=$iv_ruleTempF.current; }
	EOF;

// Rule TempF
ruleTempF returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTempFAccess().getApAPParserRuleCall_0_0());
				}
				lv_ap_0_0=ruleAP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTempFRule());
					}
					set(
						$current,
						"ap",
						lv_ap_0_0,
						"org.zot.syntax.Zot.AP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='&&'
			{
				newLeafNode(otherlv_1, grammarAccess.getTempFAccess().getAmpersandAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getFaFormulaParserRuleCall_1_1_0());
					}
					lv_fa_2_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						add(
							$current,
							"fa",
							lv_fa_2_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		    |
		(
			otherlv_3='||'
			{
				newLeafNode(otherlv_3, grammarAccess.getTempFAccess().getVerticalLineVerticalLineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getFoFormulaParserRuleCall_2_1_0());
					}
					lv_fo_4_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						add(
							$current,
							"fo",
							lv_fo_4_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		    |
		(
			otherlv_5='!!'
			{
				newLeafNode(otherlv_5, grammarAccess.getTempFAccess().getExclamationMarkExclamationMarkKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getFnotFormulaParserRuleCall_3_1_0());
					}
					lv_fnot_6_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						set(
							$current,
							"fnot",
							lv_fnot_6_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_op2_7_0=RULE_OP2
					{
						newLeafNode(lv_op2_7_0, grammarAccess.getTempFAccess().getOp2OP2TerminalRuleCall_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTempFRule());
						}
						setWithLastConsumed(
							$current,
							"op2",
							lv_op2_7_0,
							"org.zot.syntax.Zot.OP2");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getF1FormulaParserRuleCall_4_1_0());
					}
					lv_f1_8_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						set(
							$current,
							"f1",
							lv_f1_8_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getF2FormulaParserRuleCall_4_2_0());
					}
					lv_f2_9_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						set(
							$current,
							"f2",
							lv_f2_9_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_opf_10_0=RULE_OPF
					{
						newLeafNode(lv_opf_10_0, grammarAccess.getTempFAccess().getOpfOPFTerminalRuleCall_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTempFRule());
						}
						setWithLastConsumed(
							$current,
							"opf",
							lv_opf_10_0,
							"org.zot.syntax.Zot.OPF");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getFFormulaParserRuleCall_5_1_0());
					}
					lv_f_11_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						set(
							$current,
							"f",
							lv_f_11_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_opfn_12_0=RULE_OPFN
					{
						newLeafNode(lv_opfn_12_0, grammarAccess.getTempFAccess().getOpfnOPFNTerminalRuleCall_6_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTempFRule());
						}
						setWithLastConsumed(
							$current,
							"opfn",
							lv_opfn_12_0,
							"org.zot.syntax.Zot.OPFN");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTempFAccess().getF1FormulaParserRuleCall_6_1_0());
					}
					lv_f1_13_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempFRule());
						}
						set(
							$current,
							"f1",
							lv_f1_13_0,
							"org.zot.syntax.Zot.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_i_14_0=RULE_INT
					{
						newLeafNode(lv_i_14_0, grammarAccess.getTempFAccess().getIINTTerminalRuleCall_6_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTempFRule());
						}
						setWithLastConsumed(
							$current,
							"i",
							lv_i_14_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAP
entryRuleAP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAPRule()); }
	iv_ruleAP=ruleAP
	{ $current=$iv_ruleAP.current; }
	EOF;

// Rule AP
ruleAP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getAPAccess().getHyphenMinusKeyword_0());
		}
		(
			otherlv_1='P'
			{
				newLeafNode(otherlv_1, grammarAccess.getAPAccess().getPKeyword_1_0());
			}
			    |
			otherlv_2='p'
			{
				newLeafNode(otherlv_2, grammarAccess.getAPAccess().getPKeyword_1_1());
			}
		)
		otherlv_3='-'
		{
			newLeafNode(otherlv_3, grammarAccess.getAPAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getAPAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAPRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_i_0_0=RULE_INT
				{
					newLeafNode(lv_i_0_0, grammarAccess.getDataTypeAccess().getIINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"i",
						lv_i_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_float_1_0=RULE_FLOAT
				{
					newLeafNode(lv_float_1_0, grammarAccess.getDataTypeAccess().getFloatFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"float",
						lv_float_1_0,
						"org.zot.syntax.Zot.FLOAT");
				}
			)
		)?
	)
;

RULE_PROPOP : ('<'|'<='|'='|'>'|'>=');

RULE_OP2 : ('->'|'<->'|'until'|'since'|'release'|'trigger');

RULE_OPF : ('next'|'yesterday'|'alw'|'som'|'alwf'|'somf'|'alwp'|'somp');

RULE_OPFN : ('futr'|'past'|'withinf'|'withinp'|'lasts'|'lasted');

RULE_FLOAT : '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
