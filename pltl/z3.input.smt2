(set-option :smtlib2-compliant true)
;Formula table:
;0	(-P- a)
;1	(!! (-P- a))
;2	(-P- b)
;3	(= 0.3 (zot-cp (-P- a) (-P- b)))
;4	(&& (!! (-P- a)) (-P- b) (= 0.3 (zot-cp (-P- a) (-P- b))))
;5	(-P- c)
;6	(&& (-P- a) (-P- b))
;7	(&& (-P- a) (!! (-P- b)))
;8	(&& (-P- b) (-P- c))
;9	(&& (-P- b) (!! (-P- c)))
;10	(&& (!! (-P- a)) (-P- b))
;11	(-P- b)
;12	(!! (-P- b))
;13	(-P- c)
;14	(!! (-P- c))
;Conditional probability table:
;0	(zot-cp 0 0 0 2)
;1	(zot-cp 0 1 0 11)
;2	(zot-cp 0 0 0 11)
;3	(zot-cp 0 2 0 13)

(declare-fun zot (Int Int) Bool)
(declare-fun zot-p (Int Int) Real)
(declare-fun zot-cp (Int Int Int Int) Real)

(assert (and (zot 0 4) (= (zot-p 0 4) 1.0) 
;(-P- a)
(= (zot-p 0 0) (+ (zot-p 0 6) (zot-p 0 7)))
;(!! (-P- a))
(= (zot 0 1) (not (zot 0 0)))
(= 1.0 (+ (zot-p 0 1) (zot-p 0 0)))
;(-P- b)
(= (zot-p 0 2) (+ (zot-p 0 8) (zot-p 0 9)))
;(= 0.3 (zot-cp (-P- a) (-P- b)))
(= (zot 0 3) (= 0.3 (zot-cp 0 0 0 2)))
(zot 0 1)
(= 1.0 (zot-p 0 1))(zot 0 2)
(= 1.0 (zot-p 0 2))(zot 0 3)
;(&& (!! (-P- a)) (-P- b))
(= (zot 0 10) (and (zot 0 1) (zot 0 2)))
(= (zot-p 0 10) (* (zot-cp 0 1 0 11) (zot-p 0 2)));(-P- c)
;(&& (-P- a) (-P- b))
(= (zot 0 6) (and (zot 0 0) (zot 0 2)))
(= (zot-p 0 6) (* (zot-cp 0 0 0 11) (zot-p 0 2)));(&& (-P- a) (!! (-P- b)))
(= (zot 0 7) (and (zot 0 0) (zot 0 12)))
(= (zot-p 0 7) (* (zot-p 0 0) (zot-p 0 12)));(&& (-P- b) (-P- c))
(= (zot 0 8) (and (zot 0 2) (zot 0 5)))
(= (zot-p 0 8) (* (zot-cp 0 2 0 13) (zot-p 0 5)));(&& (-P- b) (!! (-P- c)))
(= (zot 0 9) (and (zot 0 2) (zot 0 14)))
(= (zot-p 0 9) (* (zot-p 0 2) (zot-p 0 14)));(&& (!! (-P- a)) (-P- b))
(= (zot 0 10) (and (zot 0 1) (zot 0 2)))
(= (zot-p 0 10) (* (zot-cp 0 1 0 11) (zot-p 0 2)));(-P- b)
(= (zot 0 11) (and (zot 0 2)))
(= (zot-p 0 11) (zot-p 0 2))(>= (zot-cp 0 0 0 2) 0.0) (<= (zot-cp 0 0 0 2) 1.0)
(>= (zot-cp 0 1 0 11) 0.0) (<= (zot-cp 0 1 0 11) 1.0)
;(&& (-P- a) (-P- b))
(= (zot 0 6) (and (zot 0 0) (zot 0 2)))
(= (zot-p 0 6) (* (zot-cp 0 0 0 11) (zot-p 0 2)));(&& (-P- a) (!! (-P- b)))
(= (zot 0 7) (and (zot 0 0) (zot 0 12)))
(= (zot-p 0 7) (* (zot-p 0 0) (zot-p 0 12)));(&& (-P- b) (-P- c))
(= (zot 0 8) (and (zot 0 2) (zot 0 5)))
(= (zot-p 0 8) (* (zot-cp 0 2 0 13) (zot-p 0 5)));(&& (-P- b) (!! (-P- c)))
(= (zot 0 9) (and (zot 0 2) (zot 0 14)))
(= (zot-p 0 9) (* (zot-p 0 2) (zot-p 0 14)));(&& (!! (-P- a)) (-P- b))
(= (zot 0 10) (and (zot 0 1) (zot 0 2)))
(= (zot-p 0 10) (* (zot-cp 0 1 0 11) (zot-p 0 2)));(-P- b)
(= (zot 0 11) (and (zot 0 2)))
(= (zot-p 0 11) (zot-p 0 2));(!! (-P- b))
(= (zot 0 12) (not (zot 0 2)))
(= 1.0 (+ (zot-p 0 12) (zot-p 0 2)))
;(-P- c)
(= (zot 0 13) (and (zot 0 5)))
(= (zot-p 0 13) (zot-p 0 5));(!! (-P- c))
(= (zot 0 14) (not (zot 0 5)))
(= 1.0 (+ (zot-p 0 14) (zot-p 0 5)))
(>= (zot-cp 0 0 0 2) 0.0) (<= (zot-cp 0 0 0 2) 1.0)
(>= (zot-cp 0 1 0 11) 0.0) (<= (zot-cp 0 1 0 11) 1.0)
(>= (zot-cp 0 0 0 11) 0.0) (<= (zot-cp 0 0 0 11) 1.0)
(>= (zot-cp 0 2 0 13) 0.0) (<= (zot-cp 0 2 0 13) 1.0)
;<Range constraints>
(>= (zot-p 0 0) 0.0) (<= (zot-p 0 0) 1.0)
(>= (zot-p 0 1) 0.0) (<= (zot-p 0 1) 1.0)
(>= (zot-p 0 2) 0.0) (<= (zot-p 0 2) 1.0)
(>= (zot-p 0 3) 0.0) (<= (zot-p 0 3) 1.0)
(>= (zot-p 0 4) 0.0) (<= (zot-p 0 4) 1.0)
(>= (zot-p 0 5) 0.0) (<= (zot-p 0 5) 1.0)
(>= (zot-p 0 6) 0.0) (<= (zot-p 0 6) 1.0)
(>= (zot-p 0 7) 0.0) (<= (zot-p 0 7) 1.0)
(>= (zot-p 0 8) 0.0) (<= (zot-p 0 8) 1.0)
(>= (zot-p 0 9) 0.0) (<= (zot-p 0 9) 1.0)
(>= (zot-p 0 10) 0.0) (<= (zot-p 0 10) 1.0)
(>= (zot-p 0 11) 0.0) (<= (zot-p 0 11) 1.0)
(>= (zot-p 0 12) 0.0) (<= (zot-p 0 12) 1.0)
(>= (zot-p 0 13) 0.0) (<= (zot-p 0 13) 1.0)
(>= (zot-p 0 14) 0.0) (<= (zot-p 0 14) 1.0)
;</Range constraints>
))

(check-sat-using qfufnra)
(get-model)
