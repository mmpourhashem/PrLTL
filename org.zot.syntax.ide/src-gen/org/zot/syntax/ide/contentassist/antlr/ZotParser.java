/*
 * generated by Xtext 2.10.0
 */
package org.zot.syntax.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.zot.syntax.ide.contentassist.antlr.internal.InternalZotParser;
import org.zot.syntax.services.ZotGrammarAccess;

public class ZotParser extends AbstractContentAssistParser {

	@Inject
	private ZotGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalZotParser createParser() {
		InternalZotParser result = new InternalZotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTempDepAccess().getAlternatives(), "rule__TempDep__Alternatives");
					put(grammarAccess.getFormulaAccess().getAlternatives_1(), "rule__Formula__Alternatives_1");
					put(grammarAccess.getProbFAccess().getAlternatives_1(), "rule__ProbF__Alternatives_1");
					put(grammarAccess.getProbFAccess().getAlternatives_1_0(), "rule__ProbF__Alternatives_1_0");
					put(grammarAccess.getProbFAccess().getAlternatives_2(), "rule__ProbF__Alternatives_2");
					put(grammarAccess.getProbFAccess().getAlternatives_2_0(), "rule__ProbF__Alternatives_2_0");
					put(grammarAccess.getTempFAccess().getAlternatives(), "rule__TempF__Alternatives");
					put(grammarAccess.getAPAccess().getAlternatives_1(), "rule__AP__Alternatives_1");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getTempDepAccess().getGroup_0(), "rule__TempDep__Group_0__0");
					put(grammarAccess.getTempDepAccess().getGroup_1(), "rule__TempDep__Group_1__0");
					put(grammarAccess.getTempDepAccess().getGroup_2(), "rule__TempDep__Group_2__0");
					put(grammarAccess.getTempDepAccess().getGroup_3(), "rule__TempDep__Group_3__0");
					put(grammarAccess.getFormulaAccess().getGroup(), "rule__Formula__Group__0");
					put(grammarAccess.getProbFAccess().getGroup(), "rule__ProbF__Group__0");
					put(grammarAccess.getProbFAccess().getGroup_1_0_0(), "rule__ProbF__Group_1_0_0__0");
					put(grammarAccess.getProbFAccess().getGroup_1_0_1(), "rule__ProbF__Group_1_0_1__0");
					put(grammarAccess.getProbFAccess().getGroup_2_0_0(), "rule__ProbF__Group_2_0_0__0");
					put(grammarAccess.getProbFAccess().getGroup_2_0_1(), "rule__ProbF__Group_2_0_1__0");
					put(grammarAccess.getTempFAccess().getGroup_1(), "rule__TempF__Group_1__0");
					put(grammarAccess.getTempFAccess().getGroup_2(), "rule__TempF__Group_2__0");
					put(grammarAccess.getTempFAccess().getGroup_3(), "rule__TempF__Group_3__0");
					put(grammarAccess.getTempFAccess().getGroup_4(), "rule__TempF__Group_4__0");
					put(grammarAccess.getTempFAccess().getGroup_5(), "rule__TempF__Group_5__0");
					put(grammarAccess.getTempFAccess().getGroup_6(), "rule__TempF__Group_6__0");
					put(grammarAccess.getAPAccess().getGroup(), "rule__AP__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getModelAccess().getTempDepAssignment_1(), "rule__Model__TempDepAssignment_1");
					put(grammarAccess.getModelAccess().getFmaAssignment_3(), "rule__Model__FmaAssignment_3");
					put(grammarAccess.getTempDepAccess().getFdAssignment_0_2(), "rule__TempDep__FdAssignment_0_2");
					put(grammarAccess.getTempDepAccess().getFpsAssignment_0_3(), "rule__TempDep__FpsAssignment_0_3");
					put(grammarAccess.getTempDepAccess().getFaAssignment_1_2(), "rule__TempDep__FaAssignment_1_2");
					put(grammarAccess.getTempDepAccess().getOpfAssignment_2_1(), "rule__TempDep__OpfAssignment_2_1");
					put(grammarAccess.getTempDepAccess().getFAssignment_2_2(), "rule__TempDep__FAssignment_2_2");
					put(grammarAccess.getTempDepAccess().getOpfnAssignment_3_1(), "rule__TempDep__OpfnAssignment_3_1");
					put(grammarAccess.getTempDepAccess().getF1Assignment_3_2(), "rule__TempDep__F1Assignment_3_2");
					put(grammarAccess.getTempDepAccess().getIAssignment_3_3(), "rule__TempDep__IAssignment_3_3");
					put(grammarAccess.getFormulaAccess().getProbFAssignment_1_0(), "rule__Formula__ProbFAssignment_1_0");
					put(grammarAccess.getFormulaAccess().getTempAssignment_1_1(), "rule__Formula__TempAssignment_1_1");
					put(grammarAccess.getProbFAccess().getProbOpAssignment_0(), "rule__ProbF__ProbOpAssignment_0");
					put(grammarAccess.getProbFAccess().getTempF1Assignment_1_0_0_2(), "rule__ProbF__TempF1Assignment_1_0_0_2");
					put(grammarAccess.getProbFAccess().getTempF11Assignment_1_0_1_2(), "rule__ProbF__TempF11Assignment_1_0_1_2");
					put(grammarAccess.getProbFAccess().getTempF12Assignment_1_0_1_5(), "rule__ProbF__TempF12Assignment_1_0_1_5");
					put(grammarAccess.getProbFAccess().getReal1Assignment_1_1(), "rule__ProbF__Real1Assignment_1_1");
					put(grammarAccess.getProbFAccess().getTempF2Assignment_2_0_0_2(), "rule__ProbF__TempF2Assignment_2_0_0_2");
					put(grammarAccess.getProbFAccess().getTempF21Assignment_2_0_1_2(), "rule__ProbF__TempF21Assignment_2_0_1_2");
					put(grammarAccess.getProbFAccess().getTempF22Assignment_2_0_1_5(), "rule__ProbF__TempF22Assignment_2_0_1_5");
					put(grammarAccess.getProbFAccess().getReal2Assignment_2_1(), "rule__ProbF__Real2Assignment_2_1");
					put(grammarAccess.getTempFAccess().getApAssignment_0(), "rule__TempF__ApAssignment_0");
					put(grammarAccess.getTempFAccess().getFaAssignment_1_1(), "rule__TempF__FaAssignment_1_1");
					put(grammarAccess.getTempFAccess().getFoAssignment_2_1(), "rule__TempF__FoAssignment_2_1");
					put(grammarAccess.getTempFAccess().getFnotAssignment_3_1(), "rule__TempF__FnotAssignment_3_1");
					put(grammarAccess.getTempFAccess().getOp2Assignment_4_0(), "rule__TempF__Op2Assignment_4_0");
					put(grammarAccess.getTempFAccess().getF1Assignment_4_1(), "rule__TempF__F1Assignment_4_1");
					put(grammarAccess.getTempFAccess().getF2Assignment_4_2(), "rule__TempF__F2Assignment_4_2");
					put(grammarAccess.getTempFAccess().getOpfAssignment_5_0(), "rule__TempF__OpfAssignment_5_0");
					put(grammarAccess.getTempFAccess().getFAssignment_5_1(), "rule__TempF__FAssignment_5_1");
					put(grammarAccess.getTempFAccess().getOpfnAssignment_6_0(), "rule__TempF__OpfnAssignment_6_0");
					put(grammarAccess.getTempFAccess().getF1Assignment_6_1(), "rule__TempF__F1Assignment_6_1");
					put(grammarAccess.getTempFAccess().getIAssignment_6_2(), "rule__TempF__IAssignment_6_2");
					put(grammarAccess.getAPAccess().getNameAssignment_3(), "rule__AP__NameAssignment_3");
					put(grammarAccess.getDataTypeAccess().getIAssignment_0(), "rule__DataType__IAssignment_0");
					put(grammarAccess.getDataTypeAccess().getFloatAssignment_1(), "rule__DataType__FloatAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalZotParser typedParser = (InternalZotParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ZotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ZotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
